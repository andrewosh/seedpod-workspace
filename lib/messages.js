// This file is auto generated by the protocol-buffers cli tool

/* eslint-disable quotes */
/* eslint-disable indent */
/* eslint-disable no-redeclare */
/* eslint-disable camelcase */

// Remember to `npm install --save protocol-buffers-encodings`
var encodings = require('protocol-buffers-encodings')
var varint = encodings.varint
var skip = encodings.skip

var PackageVersion = exports.PackageVersion = {
  buffer: true,
  encodingLength: null,
  encode: null,
  decode: null
}

var PackageMetadata = exports.PackageMetadata = {
  buffer: true,
  encodingLength: null,
  encode: null,
  decode: null
}

var PackageRecord = exports.PackageRecord = {
  buffer: true,
  encodingLength: null,
  encode: null,
  decode: null
}

var RecordFieldMetadata = exports.RecordFieldMetadata = {
  buffer: true,
  encodingLength: null,
  encode: null,
  decode: null
}

var TypeVersion = exports.TypeVersion = {
  buffer: true,
  encodingLength: null,
  encode: null,
  decode: null
}

var TypeMetadata = exports.TypeMetadata = {
  buffer: true,
  encodingLength: null,
  encode: null,
  decode: null
}

var TypeRecord = exports.TypeRecord = {
  buffer: true,
  encodingLength: null,
  encode: null,
  decode: null
}

var Map_string_RecordFieldMetadata = exports.Map_string_RecordFieldMetadata = {
  buffer: true,
  encodingLength: null,
  encode: null,
  decode: null
}

definePackageVersion()
definePackageMetadata()
definePackageRecord()
defineRecordFieldMetadata()
defineTypeVersion()
defineTypeMetadata()
defineTypeRecord()
defineMap_string_RecordFieldMetadata()

function definePackageVersion () {
  var enc = [
    encodings.varint
  ]

  PackageVersion.encodingLength = encodingLength
  PackageVersion.encode = encode
  PackageVersion.decode = decode

  function encodingLength (obj) {
    var length = 0
    if (!defined(obj.major)) throw new Error("major is required")
    var len = enc[0].encodingLength(obj.major)
    length += 1 + len
    return length
  }

  function encode (obj, buf, offset) {
    if (!offset) offset = 0
    if (!buf) buf = Buffer.allocUnsafe(encodingLength(obj))
    var oldOffset = offset
    if (!defined(obj.major)) throw new Error("major is required")
    buf[offset++] = 8
    enc[0].encode(obj.major, buf, offset)
    offset += enc[0].encode.bytes
    encode.bytes = offset - oldOffset
    return buf
  }

  function decode (buf, offset, end) {
    if (!offset) offset = 0
    if (!end) end = buf.length
    if (!(end <= buf.length && offset <= buf.length)) throw new Error("Decoded message is not valid")
    var oldOffset = offset
    var obj = {
      major: 0
    }
    var found0 = false
    while (true) {
      if (end <= offset) {
        if (!found0) throw new Error("Decoded message is not valid")
        decode.bytes = offset - oldOffset
        return obj
      }
      var prefix = varint.decode(buf, offset)
      offset += varint.decode.bytes
      var tag = prefix >> 3
      switch (tag) {
        case 1:
        obj.major = enc[0].decode(buf, offset)
        offset += enc[0].decode.bytes
        found0 = true
        break
        default:
        offset = skip(prefix & 7, buf, offset)
      }
    }
  }
}

function definePackageMetadata () {
  var enc = [
    PackageVersion
  ]

  PackageMetadata.encodingLength = encodingLength
  PackageMetadata.encode = encode
  PackageMetadata.decode = decode

  function encodingLength (obj) {
    var length = 0
    if (!defined(obj.latest)) throw new Error("latest is required")
    var len = enc[0].encodingLength(obj.latest)
    length += varint.encodingLength(len)
    length += 1 + len
    return length
  }

  function encode (obj, buf, offset) {
    if (!offset) offset = 0
    if (!buf) buf = Buffer.allocUnsafe(encodingLength(obj))
    var oldOffset = offset
    if (!defined(obj.latest)) throw new Error("latest is required")
    buf[offset++] = 10
    varint.encode(enc[0].encodingLength(obj.latest), buf, offset)
    offset += varint.encode.bytes
    enc[0].encode(obj.latest, buf, offset)
    offset += enc[0].encode.bytes
    encode.bytes = offset - oldOffset
    return buf
  }

  function decode (buf, offset, end) {
    if (!offset) offset = 0
    if (!end) end = buf.length
    if (!(end <= buf.length && offset <= buf.length)) throw new Error("Decoded message is not valid")
    var oldOffset = offset
    var obj = {
      latest: null
    }
    var found0 = false
    while (true) {
      if (end <= offset) {
        if (!found0) throw new Error("Decoded message is not valid")
        decode.bytes = offset - oldOffset
        return obj
      }
      var prefix = varint.decode(buf, offset)
      offset += varint.decode.bytes
      var tag = prefix >> 3
      switch (tag) {
        case 1:
        var len = varint.decode(buf, offset)
        offset += varint.decode.bytes
        obj.latest = enc[0].decode(buf, offset, offset + len)
        offset += enc[0].decode.bytes
        found0 = true
        break
        default:
        offset = skip(prefix & 7, buf, offset)
      }
    }
  }
}

function definePackageRecord () {
  var enc = [
    encodings.string,
    PackageVersion
  ]

  PackageRecord.encodingLength = encodingLength
  PackageRecord.encode = encode
  PackageRecord.decode = decode

  function encodingLength (obj) {
    var length = 0
    if (!defined(obj.name)) throw new Error("name is required")
    var len = enc[0].encodingLength(obj.name)
    length += 1 + len
    if (!defined(obj.version)) throw new Error("version is required")
    var len = enc[1].encodingLength(obj.version)
    length += varint.encodingLength(len)
    length += 1 + len
    if (!defined(obj.transformed)) throw new Error("transformed is required")
    var len = enc[0].encodingLength(obj.transformed)
    length += 1 + len
    if (!defined(obj.original)) throw new Error("original is required")
    var len = enc[0].encodingLength(obj.original)
    length += 1 + len
    return length
  }

  function encode (obj, buf, offset) {
    if (!offset) offset = 0
    if (!buf) buf = Buffer.allocUnsafe(encodingLength(obj))
    var oldOffset = offset
    if (!defined(obj.name)) throw new Error("name is required")
    buf[offset++] = 10
    enc[0].encode(obj.name, buf, offset)
    offset += enc[0].encode.bytes
    if (!defined(obj.version)) throw new Error("version is required")
    buf[offset++] = 18
    varint.encode(enc[1].encodingLength(obj.version), buf, offset)
    offset += varint.encode.bytes
    enc[1].encode(obj.version, buf, offset)
    offset += enc[1].encode.bytes
    if (!defined(obj.transformed)) throw new Error("transformed is required")
    buf[offset++] = 26
    enc[0].encode(obj.transformed, buf, offset)
    offset += enc[0].encode.bytes
    if (!defined(obj.original)) throw new Error("original is required")
    buf[offset++] = 34
    enc[0].encode(obj.original, buf, offset)
    offset += enc[0].encode.bytes
    encode.bytes = offset - oldOffset
    return buf
  }

  function decode (buf, offset, end) {
    if (!offset) offset = 0
    if (!end) end = buf.length
    if (!(end <= buf.length && offset <= buf.length)) throw new Error("Decoded message is not valid")
    var oldOffset = offset
    var obj = {
      name: "",
      version: null,
      transformed: "",
      original: ""
    }
    var found0 = false
    var found1 = false
    var found2 = false
    var found3 = false
    while (true) {
      if (end <= offset) {
        if (!found0 || !found1 || !found2 || !found3) throw new Error("Decoded message is not valid")
        decode.bytes = offset - oldOffset
        return obj
      }
      var prefix = varint.decode(buf, offset)
      offset += varint.decode.bytes
      var tag = prefix >> 3
      switch (tag) {
        case 1:
        obj.name = enc[0].decode(buf, offset)
        offset += enc[0].decode.bytes
        found0 = true
        break
        case 2:
        var len = varint.decode(buf, offset)
        offset += varint.decode.bytes
        obj.version = enc[1].decode(buf, offset, offset + len)
        offset += enc[1].decode.bytes
        found1 = true
        break
        case 3:
        obj.transformed = enc[0].decode(buf, offset)
        offset += enc[0].decode.bytes
        found2 = true
        break
        case 4:
        obj.original = enc[0].decode(buf, offset)
        offset += enc[0].decode.bytes
        found3 = true
        break
        default:
        offset = skip(prefix & 7, buf, offset)
      }
    }
  }
}

function defineRecordFieldMetadata () {
  var enc = [
    encodings.string,
    encodings.bool
  ]

  RecordFieldMetadata.encodingLength = encodingLength
  RecordFieldMetadata.encode = encode
  RecordFieldMetadata.decode = decode

  function encodingLength (obj) {
    var length = 0
    if (!defined(obj.name)) throw new Error("name is required")
    var len = enc[0].encodingLength(obj.name)
    length += 1 + len
    if (!defined(obj.repeated)) throw new Error("repeated is required")
    var len = enc[1].encodingLength(obj.repeated)
    length += 1 + len
    return length
  }

  function encode (obj, buf, offset) {
    if (!offset) offset = 0
    if (!buf) buf = Buffer.allocUnsafe(encodingLength(obj))
    var oldOffset = offset
    if (!defined(obj.name)) throw new Error("name is required")
    buf[offset++] = 10
    enc[0].encode(obj.name, buf, offset)
    offset += enc[0].encode.bytes
    if (!defined(obj.repeated)) throw new Error("repeated is required")
    buf[offset++] = 16
    enc[1].encode(obj.repeated, buf, offset)
    offset += enc[1].encode.bytes
    encode.bytes = offset - oldOffset
    return buf
  }

  function decode (buf, offset, end) {
    if (!offset) offset = 0
    if (!end) end = buf.length
    if (!(end <= buf.length && offset <= buf.length)) throw new Error("Decoded message is not valid")
    var oldOffset = offset
    var obj = {
      name: "",
      repeated: false
    }
    var found0 = false
    var found1 = false
    while (true) {
      if (end <= offset) {
        if (!found0 || !found1) throw new Error("Decoded message is not valid")
        decode.bytes = offset - oldOffset
        return obj
      }
      var prefix = varint.decode(buf, offset)
      offset += varint.decode.bytes
      var tag = prefix >> 3
      switch (tag) {
        case 1:
        obj.name = enc[0].decode(buf, offset)
        offset += enc[0].decode.bytes
        found0 = true
        break
        case 2:
        obj.repeated = enc[1].decode(buf, offset)
        offset += enc[1].decode.bytes
        found1 = true
        break
        default:
        offset = skip(prefix & 7, buf, offset)
      }
    }
  }
}

function defineTypeVersion () {
  var enc = [
    encodings.varint
  ]

  TypeVersion.encodingLength = encodingLength
  TypeVersion.encode = encode
  TypeVersion.decode = decode

  function encodingLength (obj) {
    var length = 0
    if (!defined(obj.major)) throw new Error("major is required")
    var len = enc[0].encodingLength(obj.major)
    length += 1 + len
    if (!defined(obj.minor)) throw new Error("minor is required")
    var len = enc[0].encodingLength(obj.minor)
    length += 1 + len
    return length
  }

  function encode (obj, buf, offset) {
    if (!offset) offset = 0
    if (!buf) buf = Buffer.allocUnsafe(encodingLength(obj))
    var oldOffset = offset
    if (!defined(obj.major)) throw new Error("major is required")
    buf[offset++] = 8
    enc[0].encode(obj.major, buf, offset)
    offset += enc[0].encode.bytes
    if (!defined(obj.minor)) throw new Error("minor is required")
    buf[offset++] = 16
    enc[0].encode(obj.minor, buf, offset)
    offset += enc[0].encode.bytes
    encode.bytes = offset - oldOffset
    return buf
  }

  function decode (buf, offset, end) {
    if (!offset) offset = 0
    if (!end) end = buf.length
    if (!(end <= buf.length && offset <= buf.length)) throw new Error("Decoded message is not valid")
    var oldOffset = offset
    var obj = {
      major: 0,
      minor: 0
    }
    var found0 = false
    var found1 = false
    while (true) {
      if (end <= offset) {
        if (!found0 || !found1) throw new Error("Decoded message is not valid")
        decode.bytes = offset - oldOffset
        return obj
      }
      var prefix = varint.decode(buf, offset)
      offset += varint.decode.bytes
      var tag = prefix >> 3
      switch (tag) {
        case 1:
        obj.major = enc[0].decode(buf, offset)
        offset += enc[0].decode.bytes
        found0 = true
        break
        case 2:
        obj.minor = enc[0].decode(buf, offset)
        offset += enc[0].decode.bytes
        found1 = true
        break
        default:
        offset = skip(prefix & 7, buf, offset)
      }
    }
  }
}

function defineTypeMetadata () {
  var enc = [
    TypeVersion
  ]

  TypeMetadata.encodingLength = encodingLength
  TypeMetadata.encode = encode
  TypeMetadata.decode = decode

  function encodingLength (obj) {
    var length = 0
    if (!defined(obj.latest)) throw new Error("latest is required")
    var len = enc[0].encodingLength(obj.latest)
    length += varint.encodingLength(len)
    length += 1 + len
    return length
  }

  function encode (obj, buf, offset) {
    if (!offset) offset = 0
    if (!buf) buf = Buffer.allocUnsafe(encodingLength(obj))
    var oldOffset = offset
    if (!defined(obj.latest)) throw new Error("latest is required")
    buf[offset++] = 10
    varint.encode(enc[0].encodingLength(obj.latest), buf, offset)
    offset += varint.encode.bytes
    enc[0].encode(obj.latest, buf, offset)
    offset += enc[0].encode.bytes
    encode.bytes = offset - oldOffset
    return buf
  }

  function decode (buf, offset, end) {
    if (!offset) offset = 0
    if (!end) end = buf.length
    if (!(end <= buf.length && offset <= buf.length)) throw new Error("Decoded message is not valid")
    var oldOffset = offset
    var obj = {
      latest: null
    }
    var found0 = false
    while (true) {
      if (end <= offset) {
        if (!found0) throw new Error("Decoded message is not valid")
        decode.bytes = offset - oldOffset
        return obj
      }
      var prefix = varint.decode(buf, offset)
      offset += varint.decode.bytes
      var tag = prefix >> 3
      switch (tag) {
        case 1:
        var len = varint.decode(buf, offset)
        offset += varint.decode.bytes
        obj.latest = enc[0].decode(buf, offset, offset + len)
        offset += enc[0].decode.bytes
        found0 = true
        break
        default:
        offset = skip(prefix & 7, buf, offset)
      }
    }
  }
}

function defineTypeRecord () {
  var enc = [
    encodings.string,
    TypeVersion,
    PackageVersion,
    Map_string_RecordFieldMetadata
  ]

  TypeRecord.encodingLength = encodingLength
  TypeRecord.encode = encode
  TypeRecord.decode = decode

  function encodingLength (obj) {
    var length = 0
    if (!defined(obj.name)) throw new Error("name is required")
    var len = enc[0].encodingLength(obj.name)
    length += 1 + len
    if (!defined(obj.packageName)) throw new Error("packageName is required")
    var len = enc[0].encodingLength(obj.packageName)
    length += 1 + len
    if (!defined(obj.version)) throw new Error("version is required")
    var len = enc[1].encodingLength(obj.version)
    length += varint.encodingLength(len)
    length += 1 + len
    if (!defined(obj.packageVersion)) throw new Error("packageVersion is required")
    var len = enc[2].encodingLength(obj.packageVersion)
    length += varint.encodingLength(len)
    length += 1 + len
    if (defined(obj.fieldTypeMap)) {
      var tmp = Object.keys(obj.fieldTypeMap)
      for (var i = 0; i < tmp.length; i++) {
        tmp[i] = {key: tmp[i], value: obj.fieldTypeMap[tmp[i]]}
      }
      for (var i = 0; i < tmp.length; i++) {
        if (!defined(tmp[i])) continue
        var len = enc[3].encodingLength(tmp[i])
        length += varint.encodingLength(len)
        length += 1 + len
      }
    }
    return length
  }

  function encode (obj, buf, offset) {
    if (!offset) offset = 0
    if (!buf) buf = Buffer.allocUnsafe(encodingLength(obj))
    var oldOffset = offset
    if (!defined(obj.name)) throw new Error("name is required")
    buf[offset++] = 10
    enc[0].encode(obj.name, buf, offset)
    offset += enc[0].encode.bytes
    if (!defined(obj.packageName)) throw new Error("packageName is required")
    buf[offset++] = 18
    enc[0].encode(obj.packageName, buf, offset)
    offset += enc[0].encode.bytes
    if (!defined(obj.version)) throw new Error("version is required")
    buf[offset++] = 26
    varint.encode(enc[1].encodingLength(obj.version), buf, offset)
    offset += varint.encode.bytes
    enc[1].encode(obj.version, buf, offset)
    offset += enc[1].encode.bytes
    if (!defined(obj.packageVersion)) throw new Error("packageVersion is required")
    buf[offset++] = 34
    varint.encode(enc[2].encodingLength(obj.packageVersion), buf, offset)
    offset += varint.encode.bytes
    enc[2].encode(obj.packageVersion, buf, offset)
    offset += enc[2].encode.bytes
    if (defined(obj.fieldTypeMap)) {
      var tmp = Object.keys(obj.fieldTypeMap)
      for (var i = 0; i < tmp.length; i++) {
        tmp[i] = {key: tmp[i], value: obj.fieldTypeMap[tmp[i]]}
      }
      for (var i = 0; i < tmp.length; i++) {
        if (!defined(tmp[i])) continue
        buf[offset++] = 42
        varint.encode(enc[3].encodingLength(tmp[i]), buf, offset)
        offset += varint.encode.bytes
        enc[3].encode(tmp[i], buf, offset)
        offset += enc[3].encode.bytes
      }
    }
    encode.bytes = offset - oldOffset
    return buf
  }

  function decode (buf, offset, end) {
    if (!offset) offset = 0
    if (!end) end = buf.length
    if (!(end <= buf.length && offset <= buf.length)) throw new Error("Decoded message is not valid")
    var oldOffset = offset
    var obj = {
      name: "",
      packageName: "",
      version: null,
      packageVersion: null,
      fieldTypeMap: {}
    }
    var found0 = false
    var found1 = false
    var found2 = false
    var found3 = false
    while (true) {
      if (end <= offset) {
        if (!found0 || !found1 || !found2 || !found3) throw new Error("Decoded message is not valid")
        decode.bytes = offset - oldOffset
        return obj
      }
      var prefix = varint.decode(buf, offset)
      offset += varint.decode.bytes
      var tag = prefix >> 3
      switch (tag) {
        case 1:
        obj.name = enc[0].decode(buf, offset)
        offset += enc[0].decode.bytes
        found0 = true
        break
        case 2:
        obj.packageName = enc[0].decode(buf, offset)
        offset += enc[0].decode.bytes
        found1 = true
        break
        case 3:
        var len = varint.decode(buf, offset)
        offset += varint.decode.bytes
        obj.version = enc[1].decode(buf, offset, offset + len)
        offset += enc[1].decode.bytes
        found2 = true
        break
        case 4:
        var len = varint.decode(buf, offset)
        offset += varint.decode.bytes
        obj.packageVersion = enc[2].decode(buf, offset, offset + len)
        offset += enc[2].decode.bytes
        found3 = true
        break
        case 5:
        var len = varint.decode(buf, offset)
        offset += varint.decode.bytes
        var tmp = enc[3].decode(buf, offset, offset + len)
        obj.fieldTypeMap[tmp.key] = tmp.value
        offset += enc[3].decode.bytes
        break
        default:
        offset = skip(prefix & 7, buf, offset)
      }
    }
  }
}

function defineMap_string_RecordFieldMetadata () {
  var enc = [
    encodings.string,
    RecordFieldMetadata
  ]

  Map_string_RecordFieldMetadata.encodingLength = encodingLength
  Map_string_RecordFieldMetadata.encode = encode
  Map_string_RecordFieldMetadata.decode = decode

  function encodingLength (obj) {
    var length = 0
    if (!defined(obj.key)) throw new Error("key is required")
    var len = enc[0].encodingLength(obj.key)
    length += 1 + len
    if (defined(obj.value)) {
      var len = enc[1].encodingLength(obj.value)
      length += varint.encodingLength(len)
      length += 1 + len
    }
    return length
  }

  function encode (obj, buf, offset) {
    if (!offset) offset = 0
    if (!buf) buf = Buffer.allocUnsafe(encodingLength(obj))
    var oldOffset = offset
    if (!defined(obj.key)) throw new Error("key is required")
    buf[offset++] = 10
    enc[0].encode(obj.key, buf, offset)
    offset += enc[0].encode.bytes
    if (defined(obj.value)) {
      buf[offset++] = 18
      varint.encode(enc[1].encodingLength(obj.value), buf, offset)
      offset += varint.encode.bytes
      enc[1].encode(obj.value, buf, offset)
      offset += enc[1].encode.bytes
    }
    encode.bytes = offset - oldOffset
    return buf
  }

  function decode (buf, offset, end) {
    if (!offset) offset = 0
    if (!end) end = buf.length
    if (!(end <= buf.length && offset <= buf.length)) throw new Error("Decoded message is not valid")
    var oldOffset = offset
    var obj = {
      key: "",
      value: null
    }
    var found0 = false
    while (true) {
      if (end <= offset) {
        if (!found0) throw new Error("Decoded message is not valid")
        decode.bytes = offset - oldOffset
        return obj
      }
      var prefix = varint.decode(buf, offset)
      offset += varint.decode.bytes
      var tag = prefix >> 3
      switch (tag) {
        case 1:
        obj.key = enc[0].decode(buf, offset)
        offset += enc[0].decode.bytes
        found0 = true
        break
        case 2:
        var len = varint.decode(buf, offset)
        offset += varint.decode.bytes
        obj.value = enc[1].decode(buf, offset, offset + len)
        offset += enc[1].decode.bytes
        break
        default:
        offset = skip(prefix & 7, buf, offset)
      }
    }
  }
}

function defined (val) {
  return val !== null && val !== undefined && (typeof val !== 'number' || !isNaN(val))
}
